package spectrogram;

import java.awt.Color;
import java.awt.Graphics2D;
import java.io.ByteArrayOutputStream;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import math.Complex;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Graph.java
 *
 * Audio Capture code used is a modification done over the file AudioCapture02.java
 * provided and explained by Richard G. Baldwin at 
 * http://www.developer.com/java/other/article.php/1579071/Java-Sound-Getting-Started-Part-2-Capture-Using-Specified-Mixer.htm
 * 
 * 
 * Created on July 2014
 */
/**
 *
 * @author oziel
 */
public class Graph extends javax.swing.JFrame {

    ByteArrayOutputStream byteArrayOutputStream;
    AudioFormat audioFormat;//specifies audio capture format
    TargetDataLine targetDataLine;//Object for streaming data from Mixer (audio input)
    AudioInputStream audioInputStream;//Input Stream for Audio content
    SourceDataLine sourceDataLine;//Object for outputing Audio Stream
    double normFact = 1.0 / 32768.0;
    int Ns = 256;//number of samples in the buffer
    int size = 4;//size of rectangle used in the representation size = 1024/Ns;

    /**
     * Creates new form
     */
    public Graph() {
        initComponents();//initiates the frame components created with the Drag N' Drop tool
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1024, 640));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBounds(new java.awt.Rectangle(0, 0, 1024, 640));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 600));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void captureAudio() {
        try {
            //Get and display a list of
            // available mixers.
            Mixer.Info[] mixerInfo =
                    AudioSystem.getMixerInfo();

            //Get everything set up for capture
            audioFormat = getAudioFormat();

            DataLine.Info dataLineInfo =
                    new DataLine.Info(
                    TargetDataLine.class,
                    audioFormat);

            //Select one of the available
            // mixers.
            Mixer mixer = AudioSystem.
                    getMixer(mixerInfo[2]);

            //Get a TargetDataLine on the selected
            // mixer.
            targetDataLine = (TargetDataLine) mixer.getLine(dataLineInfo);
            //Prepare the line for use.
            targetDataLine.open(audioFormat);
            targetDataLine.start();

            //Create a thread to capture the microphone
            // data and start it running.  It will run
            // until the Stop button is clicked.
            Thread captureThread = new CaptureThread();
            captureThread.start();
        } catch (Exception e) {
            System.out.println(e);
            System.exit(0);
        }//end catch
    }//end captureAudio method

    //This method creates and returns an
    // AudioFormat object for a given set of format
    // parameters.  If these parameters don't work
    // well for you, try some of the other
    // allowable parameter values, which are shown
    // in comments following the declartions.
    private AudioFormat getAudioFormat() {
        float sampleRate = 8000.0F;
        //8000,11025,16000,22050,44100
        int sampleSizeInBits = 16;
        //8,16
        int channels = 1;
        //1,2
        boolean signed = true;
        //true,false
        boolean bigEndian = false;
        //true,false
        return new AudioFormat(
                sampleRate,
                sampleSizeInBits,
                channels,
                signed,
                bigEndian);
    }//end getAudioFormat
//=============================================//

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        Graph c = new Graph();
        c.setVisible(true);
        c.captureAudio();

    }

    //Inner class to capture data from microphone
    class CaptureThread extends Thread {
        //An arbitrary-size temporary holding buffer

        byte tempBuffer[] = new byte[Ns*2];
        int totalRead = 0;

        public void run() {
            byteArrayOutputStream =
                    new ByteArrayOutputStream();
            try {
                while (true) {
                    //Read data from the internal buffer of
                    // the data line.
                    int cnt = targetDataLine.read(tempBuffer,
                            totalRead,
                            tempBuffer.length - totalRead);
                    totalRead = totalRead + cnt;
                    if (totalRead == Ns*2) {
                        paintLine(tempBuffer);
//                        PaintThread pt = new PaintThread();
//                        pt.setBuffer(tempBuffer);
//                        pt.start();
//                        pt.join();
                        totalRead = 0;
                    }

                }//end while
            } catch (Exception e) {
                System.out.println(e);
                System.exit(0);
            }//end catch
        }//end run
    }//end inner class CaptureThread
    
    private void paintLine(byte[] buffer) {
            double[] audioData = new double[Ns];

            for (int i = 0; i < audioData.length; i++) {
                int LSB = (int) buffer[2 * i];
                int MSB = (int) buffer[2 * i + 1];
                audioData[i] = (MSB << 8 | (255 & LSB))*normFact;
            }
            double[] lineTrans = Complex.absFFT(audioData);

            System.out.println(lineTrans[130]);

            Graphics2D g2d = (Graphics2D) jPanel2.getGraphics();
            g2d.copyArea(0, 0, jPanel2.getWidth(), jPanel2.getHeight()-1, 0, 1);

            for (int i = 0; i < Ns; i++) {
                float ang = (float) ((-lineTrans[i]+1)*240.0/360.0);

                g2d.setColor(Color.getHSBColor(ang, 1, 1));
                g2d.fillRect(size*i, 0, size, 1);
            }
        }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

}
